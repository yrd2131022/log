
#RootLogger 顶级父元素指定的默认处理器为：ConsoleHandler:java.util.logging.ConsoleHandler,
handlers= java.util.logging.FileHandler

#RootLogger 顶级父元素默认的日志级别：INFO
.level= ALL


## 自定义Logger
mycom.yrd2.log.handlers= java.util.logging.ConsoleHandler
# 自定义Logger日志等级
mycom.yrd2.log.level= CONFIG
# 忽略父日志设置
mycom.yrd2.log.useParentHandlers=false



# 文件处理器
# 输出日志级别
#java.util.logging.FileHandler.level=ALL
# 为生成的输出文件名称指定一个模式。有关细节请参见以下内容（默认为 "%h/java%u.log"）。 
java.util.logging.FileHandler.pattern = D:/logs/java%u.log
# 指定要写入到任意文件的近似最大量（以字节为单位）。如果该数为 0，则没有限制（默认为无限制）。
java.util.logging.FileHandler.limit = 50000
# 输出日志文件限制个数
java.util.logging.FileHandler.count = 1
#java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
# 指定是否应该将 FileHandler 追加到任何现有文件上（默认为 false）。
# 输出日志文件 是否是追加
java.util.logging.FileHandler.append=false





# 控制台处理器
#为 Handler 指定默认的级别（默认为 Level.INFO）。 
java.util.logging.ConsoleHandler.level = ALL
# 输出日志格式
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
#指定 handler对象的字符集
java.util.logging.ConsoleHandler.encoding = UTF-8

#指定日志消息格式
java.util.logging.SimpleFormatter.format = %4$s: %5$s [%1$tc]%n










# Example to customize the SimpleFormatter output format 
# to print one-line log message like this:
#     <level>: <log message> [<date/time>]
#
# java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n

############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# For example, set the com.xyz.foo logger to only log SEVERE
# messages:
com.xyz.foo.level = SEVERE
#com.yrd.log.jul.JULTest01.level = info
