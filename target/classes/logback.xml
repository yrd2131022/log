<?xml version="1.0" encoding="UTF-8" ?>
<configuration>

<!-- 
	配置集中管理属性，我们可以直接改属性的  value 值。格式：${name}
 -->
 
 <!--
	日志输出格式：
		%-5level
		%d{yyyy-MM-dd HH:mm:ss.SSS}日期
		%c类的完整名称
		%M为method
		%L为行号
		%thread线程名称
		%m或者%msg为信息
		%n换行
-->
<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
 <property name="pattern" value="[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c %M %L [%thread] %msg%n"/>
 <!-- 定义日志文件保存路径属性 -->
 <property name="log_dir" value="D:/logs"></property>
 
 <!--
Appender: 设置日志信息的去向,常用的有以下几个
	ch.qos.logback.core.ConsoleAppender (控制台)
	ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新文件)
	ch.qos.logback.core.FileAppender (文件)
-->




<!-- 控制台日志输出 appender -->
 <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
	<!--输出流对象 默认 System.out 改为 System.err-->
	<target>System.err</target>
	<!--日志格式配置-->
	<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
		<pattern>${pattern}</pattern>
	</encoder>
</appender>

<!-- 日志文件输出的  appender -->
<appender name="file" class="ch.qos.logback.core.FileAppender">
	<!--日志格式配置-->
	<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
		<pattern>${pattern}</pattern>
	</encoder>
	<!--日志输出路径-->
	<file>${log_dir}/logback.log</file>
</appender>

<!-- 生成html格式appender对象 -->
<appender name="htmlFile" class="ch.qos.logback.core.FileAppender">
	<!--日志格式配置-->
	<encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
		<layout class="ch.qos.logback.classic.html.HTMLLayout">
			<pattern>%level%d{yyyy-MM-dd HH:mm:ss}%c%M%L%thread%m</pattern>
		</layout>
	</encoder>
	<!--日志输出路径-->
	<file>${log_dir}/logback.html</file>
</appender>


<!-- 日志文件拆分和归档的appender对象-->
<appender name="rollFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
	<!--日志格式配置-->
	<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
		<pattern>${pattern}</pattern>
	</encoder>
	<!--日志输出路径-->
	<file>${log_dir}/roll_logback.log</file>
	
	<!--指定日志文件拆分和压缩规则-->
	<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
		<!--通过指定压缩文件名称，来确定分割文件方式-->
		<fileNamePattern>${log_dir}/rolling.%d{yyyy-MM-dd}.log%i.gz</fileNamePattern>
		<!--文件拆分大小-->
		<maxFileSize>1MB</maxFileSize>
	</rollingPolicy>
	<!--filter配置-->
	<filter class="ch.qos.logback.classic.filter.LevelFilter">
		<!--设置拦截日志级别-->
		<level>ERROR</level>
		<onMatch>ACCEPT</onMatch>
		<onMismatch>DENY</onMismatch>
	</filter>
</appender>

<!--异步日志-->
<appender name="async" class="ch.qos.logback.classic.AsyncAppender">
	<!-- 指定某个具体的 appender -->
	<appender-ref ref="rollFile"/>
</appender>





<!--
	用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
	<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性
name:
	用来指定受此logger约束的某一个包或者具体的某一个类。
level:
	用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和OFF，
	如果未设置此属性，那么当前logger将会继承上级的级别。
additivity:
	是否向上级loger传递打印信息。默认是true。
<logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
-->
<!--
	也是<logger>元素，但是它是根logger。默认debug
	level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和 OFF，
	<root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
-->

<!-- root logger 配置 -->
<root level="ALL">
	<appender-ref ref="console"/>
<!-- 	<appender-ref ref="file"/> -->
	<appender-ref ref="async"/>
</root>

<!--自定义logger additivity表示是否从 rootLogger继承配置-->
<logger name="com.yrd.log" level="info" additivity="false">
	<appender-ref ref="console"/>
</logger>

</configuration>

