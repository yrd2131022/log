#指定 RootLogger 顶级父元素默认配置信息
#指定日志级别=INFO ,使用的输出端appender 为 Console,A ,DailyRollingFile  , RollingFile.(log4j.rootLogger=INFO,Console,RollingFile)
log4j.rootLogger=INFO,Console




# 自定义Logger:  log4j.logger + 自定义名(包名：com.yrd.log.log4j)
#实际上输出类型两部分：log4j.logger.com.yrd.log.log4j = warn,Console 加上log4j.rootLogger 中的    A
log4j.logger.com.yrd.log.log4j = warn,RollingFile
log4j.logger.org.apache = error





# 控制台输出配置
log4j.appender.Console=org.apache.log4j.ConsoleAppender
#指定消息格式  layout
#log4j.appender.Console.layout=org.apache.log4j.SimpleLayout

#log4j.appender.Console.layout=org.apache.log4j.HTMLLayout
#常用PatternLayout这种格式
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] %F %L - %m%n


#* log4j 采用类似 C 语言的 printf 函数的打印格式格式化日志信息，具体的占位符及其含义如下：
#	%m 输出代码中指定的日志信息
#	%p 输出优先级，及 DEBUG、INFO 等
#	%n 换行符（Windows平台的换行符为 "\n"，Unix 平台为 "\n"）
#	%r 输出自应用启动到输出该 log 信息耗费的毫秒数
#	%c 输出打印语句所属的类的全名
#	%t 输出产生该日志的线程全名
#	%d 输出服务器当前时间，默认为 ISO8601，也可以指定格式，如：%d{yyyy年MM月dd日 HH:mm:ss}
#	%l 输出日志时间发生的位置，包括类名、线程、及在代码中的行数。如：Test.main(Test.java:10)
#	%F 输出日志消息产生时所在的文件名称
#	%L 输出代码中的行号
#	%% 输出一个 "%" 字符
#* 可以在 % 与字符之间加上修饰符来控制最小宽度、最大宽度和文本的对其方式。如：
#	%5c 输出category名称，最小宽度是5，category<5，默认的情况下右对齐
#	%-5c 输出category名称，最小宽度是5，category<5，"-"号指定左对齐,会有空格
#	%.5c 输出category名称，最大宽度是5，category>5，就会将左边多出的字符截掉，<5不会有空格
#	%20.30c category名称<20补空格，并且右对齐，>30字符，就从左边交远销出的字符截掉




# 文件输出配置
log4j.appender.A = org.apache.log4j.FileAppender
#指定日志的输出路径
log4j.appender.A.File = D:/logs/log_log4j.txt
log4j.appender.A.Append = false
#使用自定义日志格式化器
log4j.appender.A.layout = org.apache.log4j.PatternLayout
#指定日志的输出格式  2021-06-21 12:26:30 [main:0] -[INFO] info
log4j.appender.A.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%t:%r] %-5p [%l] - %m%n
#指定日志的文件编码
log4j.appender.A.encoding=UTF-8


# 文件输出配置      #按照文件大小拆分的 appender 对象
log4j.appender.RollingFile = org.apache.log4j.RollingFileAppender
#指定日志的输出路径
log4j.appender.RollingFile.File = D:/logs/log_log4j.txt
#文件末尾进行添加,默认true
log4j.appender.RollingFile.Append = false
#使用自定义日志格式化器
log4j.appender.RollingFile.layout = org.apache.log4j.PatternLayout
#指定日志的输出格式  2021-06-21 12:26:30 [main:0] -[INFO] info
log4j.appender.RollingFile.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%t:%r] %-5p [%l] - %m%n
#指定日志的文件编码
log4j.appender.RollingFile.encoding=UTF-8
#指定日志文件内容的大小
log4j.appender.RollingFile.maxFileSize=1MB
#指定日志文件的数量
log4j.appender.RollingFile.maxBackupIndex=10




# 文件输出配置，按照时间规则拆分的
log4j.appender.DailyRollingFile = org.apache.log4j.DailyRollingFileAppender
#指定日志的输出路径
log4j.appender.DailyRollingFile.File = D:/logs/log_log4j.txt
#log4j.appender.DailyRollingFile.Append = true
#使用自定义日志格式化器
log4j.appender.DailyRollingFile.layout = org.apache.log4j.PatternLayout
#指定日志的输出格式  2021-06-21 12:26:30 [main:0] -[INFO] info
log4j.appender.DailyRollingFile.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%t:%r] %-5p [%l] - %m%n
#指定日志的文件编码
log4j.appender.DailyRollingFile.encoding=UTF-8
#指定日期拆分规则,默认值：'.'yyyy-MM-dd
log4j.appender.DailyRollingFile.datePattern='.'yyyy-MM-dd-HH-mm-ss



#mysql
log4j.appender.logDB=org.apache.log4j.jdbc.JDBCAppender
log4j.appender.logDB.layout=org.apache.log4j.PatternLayout
log4j.appender.logDB.Driver=com.mysql.jdbc.Driver
log4j.appender.logDB.URL=jdbc:mysql://localhost:3306/test
log4j.appender.logDB.User=root
log4j.appender.logDB.Password=root
log4j.appender.logDB.Sql=INSERT INTO log(project_name,create_date,level,category,file_name,thread_name,line,all_category,message) values('itcast','%d{yyyy-MM-ddHH:mm:ss}','%p','%c','%F','%t','%L','%l','%m')

#需要配置mysql-connector-java 
#CREATE TABLE `log` (
#`log_id` int(11) NOT NULL AUTO_INCREMENT,
#`project_name` varchar(255) DEFAULT NULL COMMENT '目项名',
#`create_date` varchar(255) DEFAULT NULL COMMENT '创建时间',
#`level` varchar(255) DEFAULT NULL COMMENT '优先级',
#`category` varchar(255) DEFAULT NULL COMMENT '所在类的全名',
#`file_name` varchar(255) DEFAULT NULL COMMENT '输出日志消息产生时所在的文件名称 ',
#`thread_name` varchar(255) DEFAULT NULL COMMENT '日志事件的线程名',
#`line` varchar(255) DEFAULT NULL COMMENT '号行',
#`all_category` varchar(255) DEFAULT NULL COMMENT '日志事件的发生位置',
#`message` varchar(4000) DEFAULT NULL COMMENT '输出代码中指定的消息',
#PRIMARY KEY (`log_id`)
#);

