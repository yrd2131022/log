在开始使用SLF4J之前，
请注意，启用slf4j的库意味着仅添加一个强制性依赖项，即slf4j-api.jar。
如果在类路径上未找到绑定（具体的实现类），则slf4j将默认为无操作实现（slf4j只是一个接口）。

SLF4J日志门面主要提供两大功能：

1. 日志框架的绑定
绑定日志的实现（Binding）
如前所述，SLF4J支持各种日志框架。SLF4J发行版附带了几个称为“SLF4J绑定”的jar文件，每个绑定对应一个受支持的框架。
使用slf4j的日志绑定流程:
1. 添加slf4j-api的依赖
2. 使用slf4j的API在项目中进行统一的日志记录
3. 绑定具体的日志实现框架
	1. 绑定已经实现了slf4j的日志框架,直接添加对应依赖
	(logback-classic.jar,logback-core.jar)(slf4j-simple.jar)(slf4j-nop.jar)
	
	2. 绑定没有实现slf4j的日志框架,先添加日志的适配器(slf4j-log412.jar)(slf4j-jdk14.jar),再添加实现类的依赖
	(log4j.jar)(jul)
4. slf4j有且仅有一个日志实现框架的绑定（如果出现多个默认使用第一个依赖日志实现）

2. 日志框架的桥接



<!--slf4j core 使用slf4j必須添加-->
<dependency>
	<groupId>org.slf4j</groupId>
<	artifactId>slf4j-api</artifactId>
	<version>1.7.27</version>
</dependency>
<!--slf4j 自带的简单日志实现 -->
<dependency>
	<groupId>org.slf4j</groupId>
	<artifactId>slf4j-simple</artifactId>
	<version>1.7.27</version>
</dependency>

<!-- not 日志开关，（不使用日志了） -->
		<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-nop -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-nop</artifactId>
			<version>1.7.31</version>
			<!-- <scope>test</scope> -->
		</dependency>


		<!-- 绑定：logback 日志实现 -->
		<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.3</version>
			<!-- <scope>test</scope> -->
		</dependency>
		<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-core -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>1.2.3</version>
		</dependency>





常见的日志门面 ：
JCL(被淘汰)、slf4j
常见的日志实现：
JUL、log4j、logback、log4j2

对于一般的Java项目而言，日志框架会选择slf4j-api作为门面，配上具体的实现框架（log4j、logback等），中间使用桥接器完成桥接。

log4j2,是门面技术，也是实现框架。

一般使用：slf4j+logback。或slf4j+log4j2